{"version":3,"file":"functions.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA,8CAA8C;;;;;WCA9C;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,GAAGA,CAACC,KAAK,EAAEC,MAAM,EAAE;EACjC,OAAOD,KAAK,GAAGC,MAAM;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASC,KAAKA,CAACC,UAAU,EAAE;EAChC,IAAMC,KAAK,GAAGC,WAAW,CAAC,YAAM;IAC9B,IAAMC,IAAI,GAAGC,WAAW,EAAE;IAC1BJ,UAAU,CAACK,SAAS,CAACF,IAAI,CAAC;EAC5B,CAAC,EAAE,IAAI,CAAC;EAERH,UAAU,CAACM,UAAU,GAAG,YAAM;IAC5BC,aAAa,CAACN,KAAK,CAAC;EACtB,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACO,SAASG,WAAWA,CAAA,EAAG;EAC5B,OAAO,IAAII,IAAI,EAAE,CAACC,kBAAkB,EAAE;AACxC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,SAASA,CAACC,WAAW,EAAEX,UAAU,EAAE;EACjD,IAAIY,MAAM,GAAG,CAAC;EACd,IAAMX,KAAK,GAAGC,WAAW,CAAC,YAAM;IAC9BU,MAAM,IAAID,WAAW;IACrBX,UAAU,CAACK,SAAS,CAACO,MAAM,CAAC;EAC9B,CAAC,EAAE,IAAI,CAAC;EAERZ,UAAU,CAACM,UAAU,GAAG,YAAM;IAC5BC,aAAa,CAACN,KAAK,CAAC;EACtB,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASY,UAAUA,CAACC,OAAO,EAAE;EAClCC,OAAO,CAACC,GAAG,CAACF,OAAO,CAAC;EAEpB,OAAOA,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,OAAOA,CAACC,OAAO,EAAEC,IAAI,EAAEC,MAAM,EAAE;EAC7C,IAAIC,YAAY,GAAG,EAAE;EAErB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAIH,IAAI,CAACI,MAAM,EAAED,GAAG,EAAE,EAAE;IAC3C,KAAK,IAAIE,MAAM,EAAEA,MAAM,IAAIN,OAAO,CAACK,MAAM,EAAEC,MAAM,EAAE,EAAE;MACnDH,YAAY,CAACI,IAAI,CAAC,CAACN,IAAI,CAACG,GAAG,CAAC,EAAEJ,OAAO,CAACM,MAAM,CAAC,EAAEJ,MAAM,CAACE,GAAG,CAAC,CAACE,MAAM,CAAC,CAAC,CAAC;IACtE;EACF;EAEA,OAAOH,YAAY;AACrB;AAEAK,eAAe,CAACC,SAAS,CAAC,KAAK,EAAE/B,GAAG,CAAC;AACrC8B,eAAe,CAACC,SAAS,CAAC,OAAO,EAAE5B,KAAK,CAAC;AACzC2B,eAAe,CAACC,SAAS,CAAC,WAAW,EAAEjB,SAAS,CAAC;AACjDgB,eAAe,CAACC,SAAS,CAAC,KAAK,EAAEd,UAAU,CAAC;AAC5Ca,eAAe,CAACC,SAAS,CAAC,SAAS,EAAEV,OAAO,CAAC","sources":["webpack://office-addin-taskpane-react-js/webpack/bootstrap","webpack://office-addin-taskpane-react-js/webpack/runtime/define property getters","webpack://office-addin-taskpane-react-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-react-js/webpack/runtime/make namespace object","webpack://office-addin-taskpane-react-js/./src/functions/functions.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Adds two numbers.\n * @customfunction\n * @param first First number\n * @param second Second number\n * @returns The sum of the two numbers.\n */\n/* global clearInterval, console, setInterval */\nexport function add(first, second) {\n  return first + second;\n}\n\n/**\n * Displays the current time once a second.\n * @customfunction\n * @param invocation Custom function handler\n */\nexport function clock(invocation) {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time.\n * @returns String with the current time formatted for the current locale.\n */\nexport function currentTime() {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param incrementBy Amount to increment\n * @param invocation Custom function handler\n */\nexport function increment(incrementBy, invocation) {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param message String to write.\n * @returns String to write.\n */\nexport function logMessage(message) {\n  console.log(message);\n\n  return message;\n}\n\n/**\n * Unpivots a range of cells.\n * @customfunction UNPIVOT\n * @param headers The range of cells that represent your headers.\n * @param rows The range of cells that represent your row headers.\n * @param values The range of cells that represent your range of values.\n * @returns  The normalized range of cells.\n */\nexport function unpivot(headers, rows, values) {\n  let unpivot_data = [];\n\n  for (var row = 1; row <= rows.length; row++) {\n    for (var header; header <= headers.length; header++) {\n      unpivot_data.push([rows[row], headers[header], values[row][header]]);\n    }\n  }\n\n  return unpivot_data;\n}\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"UNPIVOT\", unpivot);"],"names":["add","first","second","clock","invocation","timer","setInterval","time","currentTime","setResult","onCanceled","clearInterval","Date","toLocaleTimeString","increment","incrementBy","result","logMessage","message","console","log","unpivot","headers","rows","values","unpivot_data","row","length","header","push","CustomFunctions","associate"],"sourceRoot":""}